from __future__ import absolute_import
import argparse
import glob
import json
import os
import pprint
import re
import requests


def upload_models(input_dir, wikis):
    fnames = glob.glob('%s/model_*.json' % (input_dir))
    wikis = set(wikis)
    for fname in fnames:
        print fname
        match_wiki = re.search('model_([^.]+).json', os.path.basename(fname))
        if match_wiki is None:
            print '\tFailed to parse wiki from %s.' % (os.path.basename(fname))
            print '\tSkipping.'
            print ''
            continue

        wiki = match_wiki.group(1)
        if wikis and wiki not in wikis:
            continue
        # Take the portion of the directory name before the first _ as portion of model name
        name = os.path.dirname(fnames[0]).split('_')[0]
        # TODO: v1?
        model_name = '%s_%s_v1' % (name, wiki)

        answer = raw_input('\tUpload model %s? ' % (model_name)).lower()
        if answer != 'y':
            print '\tSkipping.'
            print ''
            continue

        with open(fnames[0], 'r') as f:
            model = json.loads(f.read())

        req = {
            "name": model_name,
            "model": {
                "type": "model/xgboost+json",
                "definition": model
            },
            "validation": {
                "index": wiki,
                # TODO: hard coded params..
                "params": {
                    "query_string": "example query string"
                }
            }

        }

        # TODO: Hardcoded cluster hosts
        for host in ['elastic2020.codfw.wmnet', 'elastic1020.eqiad.wmnet']:
            print '\tUploading to %s' % (host)
            res = requests.post('http://%s:9200/_ltr/_featureset/enwiki_v1/_createmodel' % (host),
                                data=json.dumps(req), headers={'Content-Type': 'application/json'})

            try:
                parsed = res.json()
                if 'result' in parsed and parsed['result'] == 'created':
                    print 'Created on %s!' % (host)
                else:
                    pprint.pprint(parsed)
                    break
            except ValueError:
                print res.text
                break


def parse_arguments(argv):
    parser = argparse.ArgumentParser(description='Upload models to elasticsearch')
    parser.add_argument(
        '-i', '--input', dest='input_dir', required=True,
        help='Input directory generated by training_pipeline to upload models from')
    parser.add_argument(
        'wikis', metavar='wikis', type=str, nargs='*',
        help='Wikis to upload models for. Empty for all models in input directory')
    args = parser.parse_args(argv)
    return dict(vars(args))


def main(argv=None):
    args = parse_arguments(argv)
    # ???
    upload_models(*args)


if __name__ == "__main__":
    main()
